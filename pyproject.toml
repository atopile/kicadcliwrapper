[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "kicadcliwrapper"
dynamic = ["version"]
description = "Kicad-CLI python bindings"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "MIT" }
authors = [
    { name = "Ioannis Papamanoglou", email = "ioannis@atopile.io" },
    { name = "Matthew Wildoer", email = "matt@atopile.io" },
    { name = "Narayan Powderly", email = "narayan@atopile.io" },
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = ["black>=24.4.2", "typing-extensions>=4.6.3"]

[project.urls]
Homepage = "https://github.com/atopile/kicadcliwrapper"
Repository = "https://github.com/atopile/kicadcliwrapper"
"Bug Tracker" = "https://github.com/faebryk/kicadcliwrapper/issues"

[dependency-groups]
dev = [
    "typer>=0.9.0",
    "pre-commit>=2.20.0",
    "pytest>=7.1.3",
    "isort>=5.6.4",
    "ruff>=0.11",
]

# Add the built viewer to the python package
[tool.hatch.build.targets.wheel]
packages = ["src/kicadcliwrapper"]

[tool.hatch.metadata]
# Example from .local/pyproject.toml, adjust if needed
# allow-direct-references = true

# If you want to use hatch-vcs for versioning (recommended):
[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
# Passed through to setuptools-scm
# See: https://setuptools-scm.readthedocs.io/en/latest/config/
# https://setuptools-scm.readthedocs.io/en/latest/extending/
version_scheme = "only-version"
local_scheme = "no-local-version"

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]

[tool.ruff]
line-length = 88         # Same as Black.
target-version = "py313"

exclude = ["docs/", "sandbox/"]

[tool.ruff.format]
exclude = ["_F.py"]

[tool.ruff.lint]
# Enable recommended set of rules
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I001", # isort
    #"B",    # flake8-bugbear
    #"C4",   # flake8-comprehensions
    #"PL",   # Pylint
    #"RUF",  # Ruff-specific rules
    #"UP",   # pyupgrade
    #"N",    # pep8-naming
    #"SIM",  # flake8-simplify
    #"TCH",  # flake8-type-checking
    #"ARG",  # flake8-unused-arguments
    #"PTH",  # flake8-use-pathlib
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A",   # flake8-builtins
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "D",   # pydocstyle
    "E",   # pycodestyle errors
    "F",   # Pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "N",   # pep8-naming
    "Q",   # flake8-quotes
    "S",   # flake8-bandit
    "T",   # flake8-print
    "W",   # pycodestyle warnings
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "BLE", # flake8-blind-except
    "COM", # flake8-commas
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "ERA", # eradicate
    "EXE", # flake8-executable
    "FBT", # flake8-boolean-trap
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "NPY", # NumPy-specific rules
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # Pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP",  # pyupgrade
    "YTT", # flake8-2020
]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.black]
line-length = 88
target-version = ['py313']
